{"version":3,"sources":["components/Issue.module.css","components/NavBar.module.css","logo.svg","actions/IssueActions.js","components/NavBar.js","components/Issue.js","components/IssueList.js","components/RecentIssue.js","App.js","reportWebVitals.js","reducers/IssueReducer.js","store.js","index.js"],"names":["module","exports","fetchIssue","page","dispatch","type","fetch","then","res","json","console","log","data","map","item","Object","assign","highlighted","payload","catch","error","fetchIssueFailure","NavBar","counter","useSelector","state","useDispatch","className","styles","navBarContainer","fontWeight","style","marginRight","position","variant","isRound","icon","onClick","colorScheme","_focus","background","top","right","fontSize","backgroundColor","borderRadius","paddingLeft","paddingRight","Issue","id","title","isHighlight","inRecent","issueContainer","highlight","IssueList","issues","useEffect","i","color","marginTop","borderColor","RecentIssue","recentHighlightIssues","App","ref","React","useRef","notification","useOutsideClick","handler","maxW","padding","templateRows","templateColumns","colSpan","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialIssueState","loading","IssueReducer","action","issueHighlight","issue","concat","slice","store","createStore","composeWithDevTools","applyMiddleware","logger","ReduxThunk","theme","extendTheme","fonts","body","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,UAAY,2B,mBCA7ED,EAAOC,QAAU,CAAC,gBAAkB,kC,oGCDrB,I,4FCsCR,SAASC,EAAWC,GACvB,OAAO,SAAAC,GAEL,OADAA,EAvCK,CACHC,KAAM,gBAuCDC,MAAM,wDAAD,OAAyDH,EAAzD,gBACTI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACFC,QAAQC,IAAIF,GACZ,IAAIG,EAAOH,EAAKI,KAAI,SAAAC,GAChB,OAAOC,OAAOC,OAAO,GACjBF,EAAM,CAACG,aAAa,OAI9B,OADEb,EA3CD,CACHC,KAAM,sBACNa,QAyC+BN,IACtBH,KAERU,OAAM,SAAAC,GAAK,OAAIhB,EAxCE,SAAAgB,GACtB,MAAO,CACHf,KAAM,sBACNa,QAASE,GAqCgBC,CAAkBD,Q,WCXpCE,EAlCA,WAEX,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCnB,EAAWsB,cAEjB,OACI,sBAAKC,UAAWC,IAAOC,gBAAvB,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAMC,WAAW,OAAjB,0CAIJ,eAAC,IAAD,CAAKC,MAAO,CAACC,YAAa,OAAQC,SAAU,YAA5C,UACI,cAAC,IAAD,CACAC,QAAQ,UACRC,SAAS,EACTC,KAAM,cAAC,IAAD,IACNC,QAAS,kBAAMjC,EDEpB,CACHC,KAAM,yBCFEiC,YAAY,OACZC,OAAQ,CAACC,WAAY,UAEpBjB,EAAU,EACX,cAAC,IAAD,CAAKQ,MAAO,CAACE,SAAU,WAAYQ,KAAM,GAAIC,OAAQ,IAArD,SACI,cAAC,IAAD,CAAMX,MAAO,CAACD,WAAY,IAAKa,SAAU,OAAOC,gBAAgB,MAAOC,aAAa,MAAMC,YAAa,MAAOC,aAAc,OAA5H,SAAqIxB,MAGzI,oC,kCCRDyB,EApBD,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAE9BhD,EAAWsB,cAGjB,OACI,qBAAMC,UAAWC,IAAOyB,eAAxB,SAEI,eAAC,IAAD,CAAKhB,QAASe,EAAU,KAAO,kBAAMhD,EFMtC,CACHC,KAAM,kBACNa,QERiE+B,KAAMtB,UAAYwB,EAAiBvB,IAAO0B,UAAZ,GAA3F,UACI,cAAC,IAAD,UACI,eAAC,IAAD,eAAQL,OAEZ,cAAC,IAAD,UACI,cAAC,IAAD,UAAOC,YCcZK,EA1BG,WAEd,IAAMC,EAAShC,aAAY,SAAAC,GAAK,OAAIA,EAAM+B,UACpCrD,EAAOqB,aAAY,SAAAC,GAAK,OAAIA,EAAMtB,QAClCC,EAAWsB,cAQjB,OAJA+B,qBAAU,WACNrD,EAASF,EAAWC,MACrB,CAACC,IAGA,eAAC,IAAD,WACI,cAAC,IAAD,UACKoD,EAAO3C,KAAI,SAAC6C,EAAGT,GAAJ,OACR,cAAC,EAAD,CAAgBA,GAAIS,EAAET,GAAIC,MAAOQ,EAAER,MAAOC,YAAaO,EAAEzC,aAA7CgC,QAGpB,cAAC,IAAD,CAAQZ,QAAS,kBAAMjC,EAASF,EAAWC,KAAQwD,MAAM,UAAUC,UAAU,OAAOC,YAAY,UAAU3B,QAAQ,UAAlH,sBCJG4B,EAhBK,WAEhB,IAAMC,EAAwBvC,aAAY,SAAAC,GAAK,OAAIA,EAAMsC,yBAEzD,OACI,eAAC,IAAD,WACA,cAAC,IAAD,CAAMpB,SAAS,OAAf,uCACI,cAAC,IAAD,UACKoB,EAAsBlD,KAAI,SAAC6C,EAAGT,GAAJ,OACvB,cAAC,EAAD,CAAgBA,GAAIS,EAAET,GAAIC,MAAOQ,EAAER,MAAOC,aAAa,EAAOC,UAAU,GAA5DH,YCmCjBe,MAtCf,WAEE,IAAMC,EAAMC,IAAMC,SACZC,EAAe5C,aAAY,SAAAC,GAAK,OAAIA,EAAM2C,gBAC1ChE,EAAWsB,cAMjB,OALA2C,YAAgB,CACdJ,IAAKA,EACLK,QAAS,kBAAMlE,ELcR,CACHC,KAAM,0BKXV,gCACE,cAAC,EAAD,IACA,eAAC,IAAD,CAAWkE,KAAK,eAAeC,QAAS,GAAxC,UACA,cAAC,IAAD,IAEE,eAAC,IAAD,CAAMC,aAAa,gBAAgBC,gBAAgB,iBAAnD,UACE,eAAC,IAAD,CAAUC,QAAS,EAAnB,UACE,cAAC,IAAD,CAAMhC,SAAS,OAAf,2BACA,cAAC,EAAD,OAEF,cAAC,IAAD,CAAUgC,QAAS,EAAnB,SACGP,EACD,qBAAKH,IAAKA,EAAV,SACI,cAAC,EAAD,MAGF,yCC3BCW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvE,MAAK,YAAkD,IAA/CwE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kDCPRO,EAAoB,CACtBC,SAAS,EACT7B,OAAQ,GACRpC,MAAO,GACPG,QAAS,EACTpB,KAAM,EACN4D,sBAAuB,GACvBK,cAAc,GA4DHkB,EAzDM,WAAsC,IAArC7D,EAAoC,uDAA9B2D,EAAmBG,EAAW,uCACtD,OAAOA,EAAOlF,MACV,IAAK,sBACD,OAAO,2BACAoB,GADP,IAEI4D,SAAS,IAEjB,IAAK,sBACD,OAAO,2BACA5D,GADP,IAEI4D,SAAS,EACT7B,OAAQ+B,EAAOrE,QACfE,MAAO,GACPjB,KAAMsB,EAAMtB,KAAO,IAE3B,IAAK,sBACD,MAAO,CACHkF,SAAS,EACT7B,OAAQ,GACRpC,MAAOmE,EAAOrE,SAGtB,IAAK,kBACD,IAAIsE,EACJ,OAAO,2BACA/D,GADP,IAEI+B,OAAQ/B,EAAM+B,OAAO3C,KAAI,SAAA4E,GACrB,OAAIA,EAAMxC,IAAMsC,EAAOrE,SACnBuE,EAAK,aAAkB,EACvBD,EAAiBC,EACV1E,OAAOC,OAAO,GACjByE,EAAO,CAACxE,aAAa,KAGtBF,OAAOC,OAAO,GAAIyE,EAAO,CAACxE,aAAa,OAElDM,QAASE,EAAMF,QAAU,EACzBwC,sBACA,CAACyB,GAAgBE,OAAOjE,EAAMsC,sBAAsB4B,MAAM,EAAE,MAEpE,IAAK,sBACD,OAAO,2BACAlE,GADP,IAEI2C,cAAe3C,EAAM2C,eAG7B,IAAK,qBACD,OAAO,2BACA3C,GADP,IAEI2C,cAAc,IAEtB,QACI,OAAO3C,I,gBCrDJmE,EAFDC,sBAAYP,EAAcQ,8BAAoBC,0BAAgBC,SAAQC,OCG9EC,EAAQC,YAAY,CACxBC,MAAO,CACLC,KAAM,YAIVC,IAASC,OACP,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAgBM,MAAOA,EAAvB,SACE,cAAC,IAAMM,WAAP,UACI,cAAC,EAAD,UAORC,SAASC,eAAe,SAM1B9B,M","file":"static/js/main.02772733.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"issueContainer\":\"Issue_issueContainer__2zsHZ\",\"highlight\":\"Issue_highlight__3Lokj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBarContainer\":\"NavBar_navBarContainer__KggON\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const fetchIssueRequest = () => {\n    return {\n        type: 'FETCH_ISSUE'\n    }\n}\n\nconst fetchIssueSuccess = issues => {\n    return {\n        type: 'FETCH_ISSUE_SUCCESS',\n        payload: issues\n    }\n}\n\nconst fetchIssueFailure = error => {\n    return {\n        type: 'FETCH_ISSUE_FAILURE',\n        payload: error\n    }\n}\nexport const highlightIssue = (issueID) => {\n    return {\n        type: 'HIGHLIGHT_ISSUE',\n        payload: issueID\n    }\n}\n\nexport const toggleNoti = () => {\n    return {\n        type: 'TOGGLE_NOTIFICATION'\n    }\n}\n\nexport const closeNoti = () => {\n    return {\n        type: 'CLOSE_NOTIFICATION'\n    }\n}\n\nexport function fetchIssue(page) {\n    return dispatch => {\n      dispatch(fetchIssueRequest());\n      return fetch(`https://api.github.com/repos/rails/rails/issues?page=${page}&per_page=5`)\n        .then(res => res.json())\n        .then(json => {\n            console.log(json)\n            let data = json.map(item => {\n                return Object.assign({},\n                    item, {highlighted: false}\n                )\n            })\n            dispatch(fetchIssueSuccess(data));\n          return json;\n        })\n        .catch(error => dispatch(fetchIssueFailure(error)));\n    };\n  }","import { IconButton } from '@chakra-ui/button'\nimport { Text, Box } from '@chakra-ui/layout'\nimport React from 'react'\nimport { AiFillBell } from 'react-icons/ai'\nimport styles from './NavBar.module.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { toggleNoti } from '../actions/IssueActions'\n\nconst NavBar = () => {\n\n    const counter = useSelector(state => state.counter)\n    const dispatch = useDispatch()\n\n    return (\n        <div className={styles.navBarContainer}>\n            <Box>\n                <Text fontWeight=\"bold\">\n                    Quod AI Challenge: ReactJS\n                </Text>\n            </Box>\n            <Box style={{marginRight: '10vw', position: 'relative'}}>\n                <IconButton\n                variant=\"outline\"\n                isRound={true}\n                icon={<AiFillBell/>}\n                onClick={() => dispatch(toggleNoti())}\n                colorScheme=\"pink\"\n                _focus={{background: '#fff'}}\n                />\n                {counter > 0?\n                <Box style={{position: 'absolute', top: -10, right: -15 }}>\n                    <Text style={{fontWeight: 900, fontSize: '14px',backgroundColor:\"red\", borderRadius:'50%',paddingLeft: '6px', paddingRight: '6px'}}>{counter}</Text>\n                </Box>\n                    :\n                <>\n                </>\n                }\n            </Box>\n        </div>\n    )\n}\n\nexport default NavBar","import React from 'react'\nimport { Container, Text, Box } from '@chakra-ui/layout'\nimport styles from './Issue.module.css'\nimport { useDispatch } from 'react-redux'\nimport { highlightIssue } from '../actions/IssueActions'\n\nconst Issue = ({id, title, isHighlight, inRecent}) => {\n\n    const dispatch = useDispatch()\n\n\n    return (\n        <div  className={styles.issueContainer}>\n            {/* If the issue is in recent list, user cannot have a event listener */}\n            <Box onClick={inRecent? null : () => dispatch(highlightIssue(id))} className={!isHighlight?'' : styles.highlight}>\n                <Box>\n                    <Text>#{id}</Text>\n                </Box>\n                <Box>\n                    <Text>{title}</Text>\n                </Box>\n            </Box>\n        </div>\n    )\n}\n\nexport default Issue;","import { Container } from '@chakra-ui/layout'\nimport { List, Button } from \"@chakra-ui/react\"\nimport React, { useEffect } from 'react'\nimport Issue from './Issue'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchIssue } from '../actions/IssueActions'\n\nconst IssueList = () => {\n\n    const issues = useSelector(state => state.issues)\n    const page = useSelector(state => state.page)\n    const dispatch = useDispatch()\n\n\n\n    useEffect(() => {\n        dispatch(fetchIssue(page))\n    }, [dispatch])\n \n    return (\n        <Container>\n            <List>\n                {issues.map((i, id) => \n                    <Issue key={id} id={i.id} title={i.title} isHighlight={i.highlighted}/>\n                )}\n            </List>\n            <Button onClick={() => dispatch(fetchIssue(page))} color=\"#68177b\" marginTop=\"20px\" borderColor=\"#68177b\" variant=\"outline\">\n                Next\n            </Button>\n        </Container>\n    )\n}\n\nexport default IssueList;","import { Container } from '@chakra-ui/layout'\nimport { List, Text } from \"@chakra-ui/react\"\nimport React from 'react'\nimport Issue from './Issue'\nimport { useSelector } from 'react-redux'\n\nconst RecentIssue = () => {\n\n    const recentHighlightIssues = useSelector(state => state.recentHighlightIssues)\n \n    return (\n        <Container>\n        <Text fontSize=\"20px\">Recent highlighted issues</Text>\n            <List>\n                {recentHighlightIssues.map((i, id) => \n                    <Issue key={id} id={i.id} title={i.title} isHighlight={false} inRecent={true}/>\n                )}\n            </List>\n        </Container>\n    )\n}\n\nexport default RecentIssue;","import logo from \"./logo.svg\";\nimport React from 'react'\nimport \"./App.css\";\nimport { Container, ChakraProvider, Grid, GridItem, Box } from \"@chakra-ui/react\";\nimport { Text, useOutsideClick } from \"@chakra-ui/react\";\nimport NavBar from \"./components/NavBar\";\nimport IssueList from \"./components/IssueList\";\nimport { useSelector } from 'react-redux'\nimport RecentIssue from \"./components/RecentIssue\";\nimport { closeNoti } from './actions/IssueActions'\nimport { useDispatch } from 'react-redux'\n\nfunction App() {\n\n  const ref = React.useRef()\n  const notification = useSelector(state => state.notification)\n  const dispatch = useDispatch()\n  useOutsideClick({\n    ref: ref,\n    handler: () => dispatch(closeNoti())\n  })\n\n  return (\n    <div>\n      <NavBar />\n      <Container maxW=\"container.xl\" padding={50}>\n      <Box>\n            </Box>\n        <Grid templateRows=\"repeat(1,1fr)\" templateColumns=\"repeat(2, 1fr)\">\n          <GridItem colSpan={1}>\n            <Text fontSize=\"20px\">Github issues</Text>\n            <IssueList />\n          </GridItem>\n          <GridItem colSpan={1}>\n            {notification?\n            <div ref={ref}>\n                <RecentIssue/>\n            </div>\n              :\n              <>\n              </>\n            }\n            \n          </GridItem>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialIssueState = {\n    loading: false,\n    issues: [],\n    error: '' ,\n    counter: 0,\n    page: 1,\n    recentHighlightIssues: [],\n    notification: false\n}\n\nconst IssueReducer = (state=initialIssueState, action) => {\n    switch(action.type) {\n        case 'FETCH_ISSUE_REQUEST':\n            return {\n                ...state,\n                loading: true\n            }\n        case 'FETCH_ISSUE_SUCCESS':\n            return {\n                ...state,\n                loading: false,\n                issues: action.payload,\n                error: '',\n                page: state.page + 1\n            }\n        case 'FETCH_ISSUE_FAILURE':\n            return {\n                loading: false,\n                issues: [],\n                error: action.payload\n            }\n        \n        case 'HIGHLIGHT_ISSUE':\n            let issueHighlight;\n            return {\n                ...state,\n                issues: state.issues.map(issue => {\n                    if (issue.id == action.payload) {\n                        issue['highlighted'] = true\n                        issueHighlight = issue;\n                        return Object.assign({},\n                            issue, {highlighted: true}\n                        )\n                    }\n                    return Object.assign({}, issue, {highlighted: false})\n                }),\n                counter: state.counter + 1,\n                recentHighlightIssues: \n                [issueHighlight].concat(state.recentHighlightIssues.slice(0,4))\n            }\n        case 'TOGGLE_NOTIFICATION':\n            return {\n                ...state,\n                notification: !state.notification\n            }\n\n        case 'CLOSE_NOTIFICATION':\n            return {\n                ...state,\n                notification: false\n            }\n        default:\n            return state\n    }\n}\n\n\nexport default IssueReducer","import { createStore, applyMiddleware } from 'redux'\nimport { logger } from 'redux-logger'\nimport IssueReducer from './reducers/IssueReducer'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport ReduxThunk from \"redux-thunk\" \n\n\nconst store = createStore(IssueReducer, composeWithDevTools(applyMiddleware(logger, ReduxThunk)))\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider, extendTheme, Grid, GridItem } from '@chakra-ui/react';\nimport \"@fontsource/athiti\"\nimport { Provider } from 'react-redux'\n\nimport store from './store'\n\nconst theme = extendTheme({\n  fonts: {\n    body: 'Athiti'\n  }\n})\n\nReactDOM.render(\n  <Provider store={store}>\n    <ChakraProvider theme={theme}>\n      <React.StrictMode>\n          <App />\n      </React.StrictMode>\n    </ChakraProvider>\n  </Provider>\n\n\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}